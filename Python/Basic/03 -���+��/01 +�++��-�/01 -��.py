# 列表是一种可变的、有序的数据结构，可以随时添加和删除其中的元素。

# []   (中括号)  代表列表
array = []

print(array)
print(type(array))

# 存储的数据包括 <数字, 小数, 字符串, 布尔类型, 对象>
arr1 = [1, 2, 3, 'a', 'b', 'c', True, 3 > 4, print, array]
print(arr1)

"""转换其他的序列为列表"""
# 可迭代对象, (可以用循环遍历的都是可迭代对象)
str1 = 'abcdefg'
arr2 = list(str1)
print(arr2)
print('=============================')
print(str(arr2))  # 把列表强制转换成字符串, 看起来像一个列表, 但是他的类型实际上是字符串
print(type(str(arr2)))

"""列表是有序的数据结构"""
print('-' * 100)

# 根据列表的索引取值  [0] 指定索引  列表的索引从0开始  有正序和逆序<倒着取, 从-1开始>
print(arr1[0])
print(arr1[5])
print(arr1[-1])
print(arr1[-2])

"""列表是可变的数据结构"""
# 可以根据索引取到指定的列表数据以后, 通过赋值符号修改列表元素的值
# 列表修改,操作, 都是基于列表本身操作的
arr1[-2] = 789
print(arr1)


"""列表的切片"""
"""
    [起始值:结束值:步长]  range 函数
    start: 起始索引，从0开始，-1表示结束
    stop：结束索引
    step：步长，end-start，步长为正时，从左向右取值。步长为负时，反向取值
"""
print('-' * 100)
arr3 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(arr3)

# 012  左闭右开  顾首不顾尾
print(arr3[0: 3])
# 如果起始值为0, 那么可以省略
print(arr3[: 3])
# 如果想取到列表最后一个元素, 那么结束值就不要指定
print(arr3[5:])


# 步长
# 如果切片有步长, 就会分为两步走
    # 先计算起始值与结束值的范围
    # 然后再用步长计算
    # 步长默认为1
print(arr3[5::1])
print(arr3[5::2])


# 步长可以为负数
# 如果指定负数步长, 那么范围也要倒着指定
print(arr3[0::-2])
print(arr3[-1::-2])

# 列表可以用循环遍历数据内容
# for i in [1, 2, 3, 4, 5, 6, 7, 8, 9]:
#     print(i)

"""计算列表的长度"""
# len()   可以计算列表的长度
# 一定需要和 索引 区分一下
print(len([1, 2, 3, 4, 5, 6, 7, 8, 9]))